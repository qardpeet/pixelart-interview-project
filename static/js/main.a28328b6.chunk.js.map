{"version":3,"sources":["api/APIUtils.js","components/CityCard.js","components/Divider.js","components/Question.js","components/Lose.js","components/History.js","components/SplashScreen.js","components/Game.js","components/Menu.js","components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["getCityTemps","ids","unit","Promise","resolve","reject","a","fetch","join","response","ok","Error","status","statusText","json","body","CityCard","city","onClick","index","className","undefined","style","backgroundImage","countryNames","country","name","duration","up","temp","round","fromMetric","Divider","content","size","color","strokeWidth","Question","handleCardClick","question","cities","Lose","score","play","viewHistory","role","aria-label","History","questionsHistory","map","key","SplashScreen","Game","Menu","changeUnit","spy","Loading","App","state","questions","loading","randomCities","length","cityIds","randCityIds","i","randIndex","Math","floor","random","includes","push","fetchCities","then","res","formattedRes","list","main","sys","newQuestions","chunk","citiesChunk","setState","catch","e","console","error","setTimeout","currentQuestion","pickedTemp","didGuess","every","cards","incrementScore","lose","newQuestionsHistory","slice","reverse","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a28328b6.chunk.js","sourcesContent":["const getCityTemps = (ids, unit = 'metric') =>\r\n  new Promise(async (resolve, reject) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://api.openweathermap.org/data/2.5/group?id=${ids.join(\r\n          ','\r\n        )}&units=${unit}&appid=9578bce0efcfc3d25b7d3e3704490270`\r\n      );\r\n\r\n      if (!response.ok)\r\n        reject(new Error(`${response.status} ${response.statusText}`));\r\n\r\n      const body = await response.json();\r\n      resolve(body);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n\r\nexport { getCityTemps };\r\n","import React from 'react';\r\nimport Fade from 'react-reveal/Fade';\r\nimport round from 'lodash/round';\r\n\r\nimport countryNames from '../countryNames.json';\r\n\r\nconst CityCard = ({ city, onClick, index, status, unit }) => {\r\n  const fromMetric = (temp, unit) =>\r\n    unit === 'IMPERIAL' ? round(temp * (9 / 5) + 32, 2) : temp;\r\n\r\n  return (\r\n    <div\r\n      className=\"city-card\"\r\n      onClick={onClick ? () => onClick(index) : undefined}\r\n      style={{\r\n        backgroundImage: `url('https://source.unsplash.com/random/?${\r\n          countryNames[city.country]\r\n        },${city.name}')`,\r\n      }}\r\n    >\r\n      <h2>{city.name}</h2>\r\n      <h3>{countryNames[city.country]}</h3>\r\n      {status !== 'PENDING' && (\r\n        <Fade duration={700} up>\r\n          <span className=\"temperature\">\r\n            {fromMetric(city.temp, unit)} {unit === 'METRIC' ? 'C' : 'F'}\r\n          </span>\r\n        </Fade>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityCard;\r\n","import React from 'react';\r\n\r\nimport { Check, X } from 'react-feather';\r\nimport Fade from 'react-reveal/Fade';\r\nimport HeadShake from 'react-reveal/HeadShake';\r\n\r\nconst Divider = ({ status }) => {\r\n  let content = (\r\n    <Fade duration={300}>\r\n      <h3>OR</h3>\r\n    </Fade>\r\n  );\r\n\r\n  if (status === 'CORRECT') {\r\n    content = (\r\n      <Fade duration={300}>\r\n        <Check size={32} color=\"#43a047\" strokeWidth=\"3px\" />\r\n      </Fade>\r\n    );\r\n  }\r\n\r\n  if (status === 'INCORRECT') {\r\n    content = (\r\n      <HeadShake duration={700}>\r\n        <X size={32} color=\"#e53935\" strokeWidth=\"3px\" />\r\n      </HeadShake>\r\n    );\r\n  }\r\n\r\n  return <div className=\"divider\">{content}</div>;\r\n};\r\n\r\nexport default Divider;\r\n","import React from 'react';\r\n\r\nimport CityCard from './CityCard';\r\nimport Divider from './Divider';\r\n\r\nconst Question = ({ handleCardClick, question, unit }) => (\r\n  <div className=\"game-container\">\r\n    <CityCard\r\n      onClick={handleCardClick}\r\n      city={question.cities[0]}\r\n      index={0}\r\n      status={question.status}\r\n      unit={unit}\r\n    />\r\n    <Divider status={question.status} />\r\n    <CityCard\r\n      onClick={handleCardClick}\r\n      city={question.cities[1]}\r\n      index={1}\r\n      status={question.status}\r\n      unit={unit}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default Question;\r\n","import React from 'react';\r\n\r\nconst Lose = ({ score, play, viewHistory }) => (\r\n  <div className=\"losing-screen\">\r\n    <h1>\r\n      YOU LOST\r\n      <span role=\"img\" aria-label=\"emoji\">\r\n        😅\r\n      </span>\r\n    </h1>\r\n    <h2>\r\n      SCORE: <span className=\"accent\">{score}</span>\r\n    </h2>\r\n    <button onClick={play} className=\"btn-regular\">\r\n      PLAY AGAIN\r\n    </button>\r\n    <div className=\"btn-regular pink\" onClick={viewHistory}>\r\n      VIEW HISTORY\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Lose;\r\n","import React from 'react';\r\n\r\nimport CityCard from './CityCard';\r\nimport Divider from './Divider';\r\n\r\nconst History = ({ questionsHistory, play, unit }) => (\r\n  <div className=\"history-container\">\r\n    <h2>YOUR HISTORY</h2>\r\n    <button onClick={play} className=\"btn-regular\">\r\n      PLAY\r\n    </button>\r\n    {questionsHistory.map((question, index) => (\r\n      <div key={index} className=\"history-cards-wrapper\">\r\n        <CityCard\r\n          city={question.cities[0]}\r\n          status={question.status}\r\n          unit={unit}\r\n        />\r\n        <Divider status={question.status} />\r\n        <CityCard\r\n          city={question.cities[1]}\r\n          status={question.status}\r\n          unit={unit}\r\n        />\r\n      </div>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default History;\r\n","import React from 'react';\r\n\r\nconst SplashScreen = ({ play }) => (\r\n  <div className=\"splash-screen\">\r\n    <h1>\r\n      CAN YOU GUESS WHICH CITY IS <span className=\"accent\">HOTTER?</span>\r\n    </h1>\r\n    <button onClick={play} className=\"btn-regular\">\r\n      PLAY\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default SplashScreen;\r\n","import React from 'react';\r\n\r\nimport Question from './Question';\r\nimport Lose from './Lose';\r\nimport History from './History';\r\nimport SplashScreen from './SplashScreen';\r\n\r\nconst Game = ({\r\n  handleCardClick,\r\n  question,\r\n  questionsHistory,\r\n  unit,\r\n  status,\r\n  score,\r\n  play,\r\n  viewHistory,\r\n}) => {\r\n  switch (status) {\r\n    case 'PLAYING':\r\n      return (\r\n        <Question\r\n          handleCardClick={handleCardClick}\r\n          question={question}\r\n          unit={unit}\r\n        />\r\n      );\r\n    case 'LOST':\r\n      return <Lose score={score} play={play} viewHistory={viewHistory} />;\r\n    case 'HISTORY':\r\n      return (\r\n        <History questionsHistory={questionsHistory} play={play} unit={unit} />\r\n      );\r\n    default:\r\n      return <SplashScreen play={play} />;\r\n  }\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\r\n\r\nimport Pulse from 'react-reveal/Pulse';\r\n\r\nconst Menu = ({ score, changeUnit, unit, status }) => (\r\n  <div className=\"menu\">\r\n    <div className=\"menu-content-left\">\r\n      <button onClick={changeUnit} className=\"btn-small\">\r\n        {unit === 'METRIC' ? 'USE IMPERIAL UNITS' : 'USE METRIC UNITS'}\r\n      </button>\r\n    </div>\r\n    <div className=\"menu-content-right\">\r\n      {status === 'PLAYING' && (\r\n        <Pulse spy={score} duration={500}>\r\n          <h3>\r\n            SCORE: <span className=\"accent\">{score}</span>\r\n          </h3>\r\n        </Pulse>\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Menu;\r\n","import React from 'react';\r\n\r\nconst Loading = () => (\r\n  <div className=\"loading-container\">\r\n    <div className=\"loading-animation-wrapper\">\r\n      <div className=\"lds-ellipsis\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import React, { Component } from 'react';\r\nimport { getCityTemps } from './api/APIUtils';\r\nimport chunk from 'lodash/chunk';\r\n\r\nimport Game from './components/Game';\r\nimport Menu from './components/Menu';\r\nimport Loading from './components/Loading';\r\n\r\nimport cityIds from './cityIds.json';\r\n\r\nexport class App extends Component {\r\n  state = {\r\n    status: '',\r\n    unit: 'METRIC',\r\n    score: 0,\r\n    questions: [],\r\n    questionsHistory: [],\r\n    loading: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchCities();\r\n  }\r\n\r\n  randomCities = (size = 20) => {\r\n    const length = cityIds.length;\r\n    const randCityIds = [];\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      let randIndex;\r\n      while (true) {\r\n        randIndex = Math.floor(Math.random() * length);\r\n        if (!randCityIds.includes(cityIds[randIndex])) break;\r\n      }\r\n      randCityIds.push(cityIds[randIndex]);\r\n    }\r\n\r\n    return randCityIds;\r\n  };\r\n\r\n  fetchCities = () => {\r\n    //only fetch more cities if close to finish\r\n    if (this.state.questions.length - this.state.score > 3) return;\r\n\r\n    const randCityIds = this.randomCities();\r\n\r\n    getCityTemps(randCityIds)\r\n      .then(res => {\r\n        const formattedRes = res.list.map(city => {\r\n          return {\r\n            temp: city.main.temp,\r\n            name: city.name,\r\n            country: city.sys.country,\r\n          };\r\n        });\r\n\r\n        const newQuestions = chunk(formattedRes, 2).map(citiesChunk => {\r\n          return { status: 'PENDING', cities: citiesChunk };\r\n        });\r\n\r\n        this.setState(state => ({\r\n          questions: [...state.questions, ...newQuestions],\r\n        }));\r\n      })\r\n      .catch(e => {\r\n        console.error(e);\r\n        setTimeout(this.fetchCities, 3000);\r\n      });\r\n  };\r\n\r\n  handleCardClick = index => {\r\n    this.fetchCities();\r\n\r\n    const score = this.state.score;\r\n    const currentQuestion = this.state.questions[score];\r\n\r\n    if (currentQuestion.status !== 'PENDING') return;\r\n\r\n    const pickedTemp = currentQuestion.cities[index].temp;\r\n    const didGuess = currentQuestion.cities.every(\r\n      city => pickedTemp >= city.temp\r\n    );\r\n\r\n    this.setState(state => ({\r\n      questions: state.questions.map((cards, i) =>\r\n        i === score\r\n          ? { ...cards, status: didGuess ? 'CORRECT' : 'INCORRECT' }\r\n          : cards\r\n      ),\r\n    }));\r\n\r\n    if (didGuess) {\r\n      setTimeout(this.incrementScore, 2000);\r\n    } else {\r\n      setTimeout(this.lose, 2000);\r\n    }\r\n  };\r\n\r\n  changeUnit = () => {\r\n    this.setState(state => ({\r\n      unit: state.unit === 'METRIC' ? 'IMPERIAL' : 'METRIC',\r\n    }));\r\n  };\r\n\r\n  incrementScore = () => {\r\n    this.setState(state => ({\r\n      score: ++state.score,\r\n    }));\r\n  };\r\n\r\n  lose = () => {\r\n    const score = this.state.score;\r\n\r\n    const newQuestionsHistory = this.state.questions\r\n      .slice(0, score + 1)\r\n      .reverse();\r\n\r\n    this.setState(state => ({\r\n      questionsHistory: [...newQuestionsHistory, ...state.questionsHistory],\r\n      questions: state.questions.slice(score + 1),\r\n      status: 'LOST',\r\n    }));\r\n  };\r\n\r\n  play = () => {\r\n    this.setState({\r\n      status: 'PLAYING',\r\n      score: 0,\r\n    });\r\n  };\r\n\r\n  viewHistory = () => {\r\n    this.setState({\r\n      status: 'HISTORY',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Menu\r\n          score={this.state.score}\r\n          status={this.state.status}\r\n          changeUnit={this.changeUnit}\r\n          unit={this.state.unit}\r\n        />\r\n        {this.state.questions.length === this.state.score ? (\r\n          <Loading />\r\n        ) : (\r\n          <Game\r\n            handleCardClick={this.handleCardClick}\r\n            question={this.state.questions[this.state.score]}\r\n            questionsHistory={this.state.questionsHistory}\r\n            unit={this.state.unit}\r\n            status={this.state.status}\r\n            score={this.state.score}\r\n            play={this.play}\r\n            viewHistory={this.viewHistory}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}